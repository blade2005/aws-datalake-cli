#!/usr/bin/env python2.7
from __future__ import print_function
import functools
import os
import logging
import argparse
import datetime
import base64
import hashlib
import hmac
import json
import pprint
try:
    import ConfigParser as configparser
except ImportError:
    import configparser
import hammock

def __add_subparser(subparsers, sub_command, cmd_help, required_args=[]):
    subsubparser = subparsers.add_parser(
        sub_command, help=cmd_help)
    for arg in required_args:
        subsubparser.add_argument(arg, required=True)
    subsubparser.set_defaults(parser=sub_command)
    return subsubparser

def parse_opts():
    """Parse CLI options"""
    parser = argparse.ArgumentParser(description='AWS Datalake CLI')
    parser.add_argument('-c', '--configfile', action='store', help='Configfile',
                        default=os.path.expanduser('~/.aws/datalake.cfg'))

    subparsers = parser.add_subparsers(
        help='Usage: aws-datalake-cli add-cart-item -h')

    _add_subparser = functools.partial(__add_subparser, subparsers)
    _add_subparser('add-cart-item', "adds a package to the user's cart",
                   ['--package-id'])
    co_ca_p = _add_subparser(
        'checkout-cart',
        "checks out a user's cart to generate manifest files for pending cart items",
        ['--package-id'])

    co_ca_p.add_argument('--format', required=True, choices=['bucket-key',
                                                             'signed-url'])

    _add_subparser('describe-cart', "describes a user's cart")
    _add_subparser('create-package-metadata', "creates a new data lake package",
                   ['--package-id', '--metadata'])
    _add_subparser('create-package', "creates a new data lake package",
                   ['--metadata', '--package-description', '--package-name'])
    _add_subparser('describe-cart-item', "describes a item in the user's cart",
                   ['--cart-item-id'])
    _add_subparser('describe-package-metadata',
                   "describes the metadata associated with a package",
                   ['--package-id'])
    _add_subparser('describe-package-dataset',
                   "describes a dataset associated to a package",
                   ['--package-id', '--dataset-id'])
    _add_subparser('describe-package-datasets',
                   "describes the datasets associated with a package",
                   ['--package-id'])
    _add_subparser('describe-package', "describes the details of a package",
                   ['--package-id'])
    _add_subparser('describe-required-metadata',
                   "list the required metadata for packages")
    _add_subparser('import-package-manifest',
                   "uploads a new import manifest file for a package",
                   ['--package-id', '--file'])
    _add_subparser('remove-cart-item', "removes a package from the user's cart",
                   ['--cart-item-id'])
    _add_subparser('remove-package-dataset', "removes a dataset from a package",
                   ['--package-id', '--dataset-id'])
    _add_subparser('remove-package', "removes a package from the data lake",
                   ['--package-id'])
    _add_subparser('search', "search data lake", ['--terms'])
    _add_subparser('update-package', "overwrites the details for a package",
                   ['--package-id', '--package-name', '--package-description'])
    _add_subparser('upload-package-dataset',
                   "uploads a new dataset file for a package",
                   ['--package-id', '--file', '--content-type'])

    return parser.parse_args()


def get_config(config_path=os.path.expanduser('~/.aws/datalake.cfg')):
    """Retrieve config section from file"""
    section = 'DataLake'
    config = configparser.RawConfigParser()
    logging.info('config_path: %s', config_path)
    config.read(config_path)
    if config.has_section(section):
        return dict(config.items(section))


def get_auth(endpoint_host, access_key, secret_access_key):
    ak_date = hmac.new(key='DATALAKE4' + secret_access_key,
                       msg=datetime.date.today().strftime('%Y%m%d'),
                       digestmod=hashlib.sha256)
    ak_ep = hmac.new(base64.b64encode(ak_date.digest()), msg=endpoint_host,
                     digestmod=hashlib.sha256)
    ak_service = hmac.new(base64.b64encode(ak_ep.digest()), msg='datalake',
                          digestmod=hashlib.sha256)
    ak_signing = hmac.new(base64.b64encode(ak_service.digest()),
                          msg="datalake4_request", digestmod=hashlib.sha256)
    _signature = base64.b64encode(ak_signing.digest())
    api_key = '{0}:{1}'.format(access_key, _signature)
    return base64.b64encode(api_key)


class DataLake(object):

    def __init__(self, endpoint_host, access_key, secret_access_key):
        api_key = get_auth(endpoint_host.replace('https://', ''),
                           access_key, secret_access_key)
        headers = {'Auth': 'ak:{0}'.format(api_key)}
        self.datalake = hammock.Hammock(endpoint_host, headers=headers)

    def add_cart_item(self, args):
        return self.datalake.prod.cart.new.POST(data=json.dumps({'package_id': args.package_id}))

    def checkout_cart(self, args):
        return self.datalake.prod.cart.POST(data=json.dumps({'operation': 'checkout', 'format': args.format}))

    def describe_cart(self, _):
        return self.datalake.prod.cart.GET()

    def create_package_metadata(self, args):
        return self.datalake.prod.packages(args.package_id).metadata.new.POST(data=json.dumps({'metadata': json.loads(args.metadata)}))

    def create_package(self, args):
        return self.datalake.prod.packages.new.POST(data=json.dumps({'package': {'name': args.package_name, 'description': args.description}, 'metadata': json.loads(args.metadata)}))

    def describe_cart_item(self, args):
        return self.datalake.prod.cart(args.cart_item_id).GET()

    def describe_package_metadata(self, args):
        return self.datalake.prod.packages(args.package_id).metadata.GET()

    def describe_package_dataset(self, args):
        return self.datalake.prod.packages(args.package_id).datasets(args.dataset_id).GET()

    def describe_package_datasets(self, args):
        return self.datalake.prod.packages(args.package_id).datasets.GET()

    def describe_package(self, args):
        return self.datalake.prod.packages(args.package_id).GET()

    def describe_required_metadata(self, _):
        return self.datalake.prod.packages.POST(data=json.dumps({'operation': 'required_metadata'}))

    def import_package_manifest(self, args):
        return self.datalake.prod.packages(args.package_id).datasets.new.POST(
            data=json.dumps({'name': os.path.basename(
                args.file), 'type': 'manifest', 'content_type': 'application/json'}),
            files={'upload_file': open(args.file, 'rb')})

    def remove_cart_item(self, args):
        return self.datalake.prod.cart(args.cart_item_id).DELETE()

    def remove_package_dataset(self, args):
        return self.datalake.prod.packages(args.package_id).datasets(args.dataset_id).DELETE()

    def remove_package(self, args):
        return self.datalake.prod.packages(args.package_id).DELETE()

    def search(self, args):
        return self.datalake.prod.search.GET(params=[{'terms': args.terms}])

    def update_package(self, args):
        return self.datalake.prod.packages(args.package_id).PUT(data=json.dump({'name': args.package_name, 'description': args.package_description}))

    def upload_package_dataset(self, args):
        return self.datalake.prod.packages(args.package_id).datasets.new.POST(
            data=json.dumps({'name': os.path.basename(
                args.file), 'type': 'dataset', 'content_type': args.content_type}),
            files={'upload_file': open(args.file, 'rb')})


def main():
    """Main."""
    args = parse_opts()
    dir(args)
    config = get_config()
    datalake = DataLake(**config)
    funcs = {
        'add-cart-item': datalake.add_cart_item,
        'checkout-cart': datalake.checkout_cart,
        'describe-cart': datalake.describe_cart,
        'create-package-metadata': datalake.create_package_metadata,
        'create-package': datalake.create_package,
        'describe-cart-item': datalake.describe_cart_item,
        'describe-package-metadata': datalake.describe_package_metadata,
        'describe-package-dataset': datalake.describe_package_dataset,
        'describe-package-datasets': datalake.describe_package_datasets,
        'describe-package': datalake.describe_package,
        'describe-required-metadata': datalake.describe_required_metadata,
        'import-package-manifest': datalake.import_package_manifest,
        'remove-cart-item': datalake.remove_cart_item,
        'remove-package-dataset': datalake.remove_package_dataset,
        'remove-package': datalake.remove_package,
        'search': datalake.search,
        'update-package': datalake.update_package,
        'upload-package-dataset': datalake.upload_package_dataset,
    }
    resp = funcs[args.parser](args)
    pp_ = pprint.PrettyPrinter(indent=4)
    if resp:
        pp_.pprint(resp.json())
    else:
        print('Response was: {0}'.format(resp.status_code))
        pp_.pprint(resp.json())

if __name__ == "__main__":
    main()
